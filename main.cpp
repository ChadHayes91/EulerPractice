#include <iostream>

/*Problem 2:
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

You can solve this problem by using a while loop to generate the Fibonacci numbers and then having an if statement that tests if the number is divisible by 2 (using modulo or %)
We can make this program run faster by removing the requirement of an if statement testing if a Fibonacci is even by proving that every third digit in the Fibonacci sequence is even
We can do this by induction. 
Base case of the induction proof: prove f(3) is even and f(2), f(1) are odd. This  is simple and intuitive, 2 is even while 1 and 1 are odd.
Induction step - assume F(3k) is even and F(3k-1), F(3k-2) are odd. prove that F(3(k+1)) is even and F(3(k+1)-1), F(3(k+1)-2) are odd.
By simplifying, prove F(3k+3) is even and F(3k+2), F(3k+1) are odd.
Since F(3k+1) = F(3k-1) + F(3k) by the definition of the Fibonacci sequence, and F(3k-1) is odd (see assumption) and F(3k) is even (see assumption), the sum of an odd number and even number is odd.
Since F(3k+2) = F(3k) + F(3k+1) and F(3k) is even while F(3k+1) is odd, F(3k+2) is odd.
Since F(3k+3) = F(3k+1) + F(3k+2) and F(3k+1) is odd and F(3k+2) is odd, F(3k+3) is even since the sum of two odd numbers is even.
We have proven by induction every third digit in the fibonacci sequence is even, while the other two digits are odd. We can simply just sum the 3rd digit in the sequence, which is
What the while loop below does.*/

int main()
{
	int total = 0;
	int a = 1;
	int b = 1;
	int c = a + b;
	while (c < 4000000)
	{
		total += c;
		a = b + c;
		b = a + c;
		c = a + b;
	}
	std::cout << "The solution is " << total << "\n";
	return 0;
}